---------
Get started:

Goto nhaystack palette.
Drop NHaystackService under /Services.

This is all you have to do to get points to be auto-tagged.  
You can export histories now, etc. via the magic of linked points and histories

---------
Add tags to points:

If you want to add metadata to points, you need to add a "haystack" slot.
Goto slotSheet of point.
Add a slot, named "haystack", of type nhaystack:HDict.
Now goto PropertySheet of point.
The haystack slot will be there.
Click the arrow on the field editor to bring up the popup HDict tag editor.
Now you can add marker tags or whatever.
You can also just view the auto-generated tags, which are quite extensive.
Sadly you can't look at the auto-generated tags unless you create the slot. And yes, we know that its lame that you can't drag a HDict slot over from the palette :-). Workbench won't let you do that.

---------
A note about sites and equip:

The rest of this document deals with tagging sites and equips.  However, their is no UI for viewing the results of this tagging in a nice tree.  The nhaystack service does create the "nav" tree from the site/equip/point relationships, but we have not written a nav tree viewer yet.

---------
Create sites:

You can place sites and equip anywhere you want, but it makes sense to keep them together so you know where they are.
So, make a folder somewhere called something like "Sites" (putting it right under "Config" is fine).
Drag a couple of sites into it from the nhaystack palette.
Sites (and equips) already have a haystack slot, so you don't have to add one.
Now you can edit the site info, giving it a name.

---------
Create equips:

Now drag a couple of equips over from the palette.  I put them underneath their site, but you don't have to.
Change the haystackNav property of the equip, so that it says "%name%" instead of "%parent.name%".
Now edit the haystack slot of the equip, to bring up the popup tag editor.
In the tag editor, change the 'siteRef' under equip so it points to the equip.
    
---------
Tag points so they know which equip they belong too (the hard way):

For each point, bring up its tag editor (you may need to create the haystack slot first).
Under equipRef, choose the equip you want it to go with.
This will get frustrating very quickly if you have hundreds of points.

---------
Tag points so they know which equip they belong too (the easy way):

You do not actually have to tag each point individually, there is a much better way.
Go to a device that has points underneath it, and drag-and-drop an equip onto the device (so the equip is a child of the device).
For this equip, leave its haystackNav property as "%parent.name%".  That way the device name will used as the equip name in the nav tree.
Edit the equip's tags so it points to a site.
Now through a magic process, all the points automatically know they belong with that equip. This happens because each point walks upwards till it finds a device, and then looks for an equip as a child of the device.
As mentioned before, you cannot yet actually see this nav tree being generated from J2's side. 

---------
A note about equips.

Doing it the "easy way" is useful when there is an exact one-to-one mapping between a device and an equip.
If there is no such one-to-one mapping, then do it the "hard way" as mentioned above.
The "hard way" is actually far more flexible since it ignores devices completely.  This frees us entirely from Tridium's network-centric view of the world.
Naturally at J2 we are working on ways to make doing it the hard way actually be easy too.
