//
// Copyright (c) 2012, J2 Innovations
// Licensed under the Academic Free License version 3.0
//
// History:
//   04 Oct 2012  Mike Jarmy  Creation
//
package nhaystack.server.storehouse;

import java.util.*;

import javax.baja.control.*;
import javax.baja.history.*;
import javax.baja.history.ext.*;
import javax.baja.log.*;
import javax.baja.sys.*;
import javax.baja.util.*;

import haystack.*;
import nhaystack.*;
import nhaystack.server.*;

/**
  * HistoryStorehouse manages access to the BHistoryDatabase
  */
public class HistoryStorehouse extends Storehouse
{
    public HistoryStorehouse(NHServer server)
    {
        super(server);
    }

    /**
      * Try to find either a local or imported history for the point
      */
    public BHistoryConfig lookupHistoryFromPoint(BControlPoint point)
    {
        // local history
        BHistoryExt historyExt = service.lookupHistoryExt(point);
        if (historyExt != null) return historyExt.getHistoryConfig();

        // look for history that goes with a proxied point (if any)
        if (point.getProxyExt().getType().is(RemotePoint.NIAGARA_PROXY_EXT)) 
            return lookupRemoteHistory(point);
        else 
            return null;
    }

    /**
      * Return navigation tree children for given navId. 
      */
    public HGrid onNav(String navId)
    {
        if (navId.equals(Sys.getStation().getStationName() + ":" + NHRef.HISTORY))
        {
            ConfigStorehouseIterator c = server.getConfigStorehouse().makeIterator();
            // force the iterator to collect all the remote points
            while (c.hasNext()) c.next();

            Iterator itr = makeIterator();

            Array dicts = new Array(HDict.class);
            while (itr.hasNext())
                dicts.add(itr.next());
            return HGridBuilder.dictsToGrid((HDict[]) dicts.trim());
        }
        else throw new BajaRuntimeException("Cannot lookup nav for " + navId);
    }

    /**
      * Iterator through all the histories.
      */
    public HistoryStorehouseIterator makeIterator()
    {
        return new HistoryStorehouseIterator(this);
    }

    /**
      * Create the haystack representation of a BHistoryConfig.
      *
      * The haystack representation is a combination of the 
      * autogenerated tags, and those tags specified
      * in the explicit haystack annotation (if any).
      *
      * This method never returns null.
      */
    public HDict createHistoryTags(BHistoryConfig cfg)
    {
        HDictBuilder hdb = new HDictBuilder();

        // add existing tags
        BHDict btags = BHDict.findTagAnnotation(cfg);
        HDict tags = (btags == null) ? HDict.EMPTY : btags.getDict();
        hdb.add(tags);

        // add id
        hdb.add("id", NHRef.make(cfg).getHRef());
        String dis = cfg.getDisplayName(null);

        // add misc other tags
        if (dis != null) hdb.add("dis", dis);
        hdb.add("axType", cfg.getType().toString());
        hdb.add("axHistoryId", cfg.getId().toString());

        hdb.add("point");
        hdb.add("his");

        // time zone
        if (!tags.has("tz"))
        {
            HTimeZone tz = makeTimeZone(cfg.getTimeZone());
            hdb.add("tz", tz.name);
        }

        // point kind tags
        Type recType = cfg.getRecordType().getResolvedType();
        if (recType.is(BTrendRecord.TYPE))
        {
            int pointKind = getTrendRecordKind(recType);
            BFacets facets = (BFacets) cfg.get("valueFacets");
            addPointKindTags(pointKind, facets, tags, hdb);
        }

        // check if this history has a point
        ConfigStorehouse cs = server.getConfigStorehouse();
        BControlPoint point = cs.lookupPointFromHistory(cfg);
        if (point != null)
        {
            // add point ref
            hdb.add("axPointRef", NHRef.make(point).getHRef());

            // hisInterpolate 
            if (!tags.has("hisInterpolate"))
            {
                BHistoryExt historyExt = service.lookupHistoryExt(point);
                if (historyExt != null && (historyExt instanceof BCovHistoryExt))
                    hdb.add("hisInterpolate", "cov");
            }
        }

        // done
        return hdb.toDict();
    }

    /**
      * Return whether this history is visible to the outside world.
      */
    public boolean isVisibleHistory(BHistoryConfig cfg)
    {
        // annotated 
        if (BHDict.findTagAnnotation(cfg) != null)
            return true;

        // show linked
        if (service.getShowLinkedHistories())
            return true;

        // make sure the history is not linked
        ConfigStorehouse cs = server.getConfigStorehouse();
        if (cs.lookupPointFromHistory(cfg) == null)
            return true;

        return false;
    }

////////////////////////////////////////////////////////////////
// private
////////////////////////////////////////////////////////////////

    /**
      * Find the imported history that goes with an imported point, 
      * or return null.  
      */
    private BHistoryConfig lookupRemoteHistory(BControlPoint point)
    {
        RemotePoint remotePoint = RemotePoint.fromControlPoint(point);
        if (remotePoint == null) return null;

        return server.getCache().getHistoryConfig(remotePoint);
    }

    private static int getTrendRecordKind(Type trendRecType)
    {
        if      (trendRecType.is(BNumericTrendRecord.TYPE)) return NUMERIC_KIND;
        else if (trendRecType.is(BBooleanTrendRecord.TYPE)) return BOOLEAN_KIND;
        else if (trendRecType.is(BEnumTrendRecord.TYPE))    return ENUM_KIND;
        else if (trendRecType.is(BStringTrendRecord.TYPE))  return STRING_KIND;

        else return UNKNOWN_KIND;
    }

////////////////////////////////////////////////////////////////
// Attributes 
////////////////////////////////////////////////////////////////

    private static final Log LOG = Log.getLog("nhaystack");
}

